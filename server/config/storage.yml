test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazon:
  service: S3
  access_key_id: <%= ENV.fetch('AWS_ACCESS_KEY_ID', nil) %>
  secret_access_key: <%= ENV.fetch('AWS_SECRET_ACCESS_KEY', nil) %>
  region: <%= ENV.fetch('AWS_REGION', 'us-east-1') %>
  bucket: <%= ENV.fetch('AWS_S3_BUCKET', nil) %>
  # Upload configuration for all encryption scenarios
  upload:
    <% sse_type = ENV["S3_SSE_TYPE"]&.strip %>
    # Only set when valid values are provided:
    #   AES256   → SSE-S3 encryption
    #   aws:kms  → AWS-managed or customer-managed KMS key
    <% if sse_type.present? && sse_type.casecmp("none") != 0 %>
    server_side_encryption: <%= sse_type %>
    <% end %>

    # If using customer-managed KMS, provide the full key ARN.
    # Example: arn:aws:kms:us-east-1:123456789012:key/abcd-ef12-3456-7890
    <% if sse_type == "aws:kms" && ENV["S3_KMS_KEY_ID"].present? %>
    ssekms_key_id: <%= ENV["S3_KMS_KEY_ID"] %>
    <% end %>

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]

microsoft:
  service: AzureBlob
  storage_account_name: <%= ENV.fetch('STORAGE_ACCOUNT_NAME', nil) %>
  storage_access_key:  <%= ENV.fetch('STORAGE_ACCESS_KEY', nil) %>
  container: <%= ENV.fetch("STORAGE_CONTAINER_NAME") { "custom-visual-component-files" } %>
